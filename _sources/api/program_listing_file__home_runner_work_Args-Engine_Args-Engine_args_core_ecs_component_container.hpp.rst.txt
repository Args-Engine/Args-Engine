
.. _program_listing_file__home_runner_work_Args-Engine_Args-Engine_args_core_ecs_component_container.hpp:

Program Listing for File component_container.hpp
================================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Args-Engine_Args-Engine_args_core_ecs_component_container.hpp>` (``/home/runner/work/Args-Engine/Args-Engine/args/core/ecs/component_container.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <core/async/readonly_rw_spinlock.hpp>
   #include <core/async/transferable_atomic.hpp>
   #include <core/platform/platform.hpp>
   #include <core/containers/atomic_sparse_map.hpp>
   #include <core/types/types.hpp>
   
   namespace args::core::ecs
   {
       class component_container_base
       {
       public:
           virtual bool has_component(id_type entityId) ARGS_PURE;
           virtual void create_component(id_type entityId) ARGS_PURE;
           virtual void destroy_component(id_type entityId) ARGS_PURE;
       };
   
       template<typename component_type>
       class component_container : public component_container_base
       {
       private:
           atomic_sparse_map<id_type, component_type> components;
   
       public:
           virtual bool has_component(id_type entityId) override
           {
               return components.contains(entityId);
           }
   
           async::transferable_atomic<component_type>* get_component(id_type entityId)
           {
               if (components.contains(entityId))
                   return &components.get(entityId);
               return nullptr;
           }
   
           virtual void create_component(id_type entityId) override
           {
               components.emplace(entityId);
           }
   
           virtual void destroy_component(id_type entityId) override
           {
               components.erase(entityId);
           }
       };
   }
