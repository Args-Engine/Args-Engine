
.. _program_listing_file__home_runner_work_Args-Engine_Args-Engine_args_core_engine_module.hpp:

Program Listing for File module.hpp
===================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Args-Engine_Args-Engine_args_core_engine_module.hpp>` (``/home/runner/work/Args-Engine/Args-Engine/args/core/engine/module.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <core/types/primitives.hpp>
   #include <core/platform/platform.hpp>
   #include <core/engine/system.hpp>
   #include <core/containers/sparse_map.hpp>
   #include <core/ecs/ecsregistry.hpp>
   #include <core/scheduling/scheduler.hpp>
   #include <core/events/eventbus.hpp>
   #include <memory>
   
   namespace args::core
   {
       class Module
       {
           friend class Engine;
       private:
           ecs::EcsRegistry* m_ecs;
           scheduling::Scheduler* m_scheduler;
           events::EventBus* m_eventBus;
   
           sparse_map<id_type, std::unique_ptr<SystemBase>> m_systems;
   
           void init()
           {
               for (auto& system : m_systems)
                   system->setup();
           };
   
       protected:
           template<size_type charc>
           void addProcessChain(const char(&name)[charc])
           {
               m_scheduler->addProcessChain<charc>(name);
           }
   
           template<typename SystemType, typename... Args, inherits_from<SystemType, System<SystemType>> = 0>
           void reportSystem(Args&&... args)
           {
               std::unique_ptr<SystemBase> system = std::make_unique<SystemType>(std::forward<Args>(args)...);
               system->m_ecs = m_ecs;
               system->m_scheduler = m_scheduler;
               system->m_eventBus = m_eventBus;
   
               m_systems.insert(typeHash<SystemType>(), std::move(system));
           }
   
           template<typename component_type>
           void reportComponentType()
           {
               m_ecs->reportComponentType<component_type>();
           }
   
       public:
           virtual void setup() ARGS_PURE;
   
           virtual priority_type priority() ARGS_IMPURE_RETURN(default_priority);
   
           virtual ~Module() = default;
       };
   }
