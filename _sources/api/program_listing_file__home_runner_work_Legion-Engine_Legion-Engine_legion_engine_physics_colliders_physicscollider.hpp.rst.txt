
.. _program_listing_file__home_runner_work_Legion-Engine_Legion-Engine_legion_engine_physics_colliders_physicscollider.hpp:

Program Listing for File physicscollider.hpp
============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Legion-Engine_Legion-Engine_legion_engine_physics_colliders_physicscollider.hpp>` (``/home/runner/work/Legion-Engine/Legion-Engine/legion/engine/physics/colliders/physicscollider.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <core/core.hpp>
   #include <memory>
   #include <physics/halfedgeface.hpp>
   #include <physics/data/convergance_identifier.hpp>
   #include <physics/physics_contact.hpp>
   
   namespace legion::physics
   {
   
       struct physics_manifold;
       class ConvexCollider;
   
   
       class PhysicsCollider
       {
       public:
   
           std::vector<std::unique_ptr<ConverganceIdentifier>> converganceIdentifiers;
   
           PhysicsCollider()
           {
               static int colliderID = 0;
               id = colliderID++;
           }
   
           virtual void AddConverganceIdentifier(const  physics_contact& contact) = 0;
   
           void AttemptFindAndCopyConverganceID(physics_contact& contact)
           {
               for (auto&& converganceId : converganceIdentifiers)
               {
                   if (converganceId->refColliderID == contact.refCollider->GetColliderID())
                   {
                       if (converganceId->IsEqual(contact))
                       {
                           converganceId->CopyLambdasToContact(contact);
                           return;
                       }
                   }
               }
           }
               
         
   
           virtual void CheckCollision(
               std::shared_ptr<PhysicsCollider> physicsCollider, physics_manifold& manifold) {};
   
           virtual void CheckCollisionWith(ConvexCollider* convexCollider, physics_manifold& manifold) {};
   
           int GetColliderID() const
           {
               return id;
           }
   
           virtual void PopulateContactPoints(
               std::shared_ptr<PhysicsCollider> physicsCollider, physics_manifold& manifold) {};
   
           virtual void PopulateContactPointsWith(
               ConvexCollider* convexCollider, physics_manifold& manifold) {};
   
   
           inline virtual void DrawColliderRepresentation(math::mat4 transform) {};
   
           inline virtual std::vector<HalfEdgeFace*>& GetHalfEdgeFaces()
           {
               return dummyHalfEdges;
           }
   
   
   
           math::vec3 GetLocalCentroid()
           {
               return localColliderCentroid;
           }
   
       protected:
   
           math::vec3 localColliderCentroid = math::vec3(0, 0, 0);
   
       private:
   
           int id = -1;
          //this is not used, its mostly for debug reasons
           std::vector<HalfEdgeFace*> dummyHalfEdges;
   
       };
   }
   
   
   
