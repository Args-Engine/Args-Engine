
.. _program_listing_file__home_runner_work_Legion-Engine_Legion-Engine_legion_engine_core_ecs_archetype.hpp:

Program Listing for File archetype.hpp
======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Legion-Engine_Legion-Engine_legion_engine_core_ecs_archetype.hpp>` (``/home/runner/work/Legion-Engine/Legion-Engine/legion/engine/core/ecs/archetype.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <tuple>
   #include <core/platform/platform.hpp>
   #include <core/types/primitives.hpp>
   
   namespace legion::core::ecs
   {
       template<typename component_type>
       class component_handle;
   
       class EcsRegistry;
   
       struct archetype_base {};
   
       template<typename component_type, typename... component_types>
       struct archetype : public archetype_base
       {
           friend class EcsRegistry;
       public:
           using handleGroup = std::tuple<component_handle<component_type>, component_handle<component_types>...>;
   
           handleGroup handles;
   
           archetype(const handleGroup& handles) : handles(handles) {}
   
           template<typename T>
           component_handle<T> get()
           {
               return std::get<component_handle<T>>(handles);
           }
   
       private:
           static std::tuple<component_handle<component_type>, component_handle<component_types>...> create(EcsRegistry* registry, id_type entityId);
           static std::tuple<component_handle<component_type>, component_handle<component_types>...> create(EcsRegistry* registry, id_type entityId, component_type&& defaultValue, component_types&&... defaultValues);
   
           static std::tuple<component_handle<component_type>, component_handle<component_types>...> get(EcsRegistry* registry, id_type entityId);
           static void destroy(EcsRegistry* registry, id_type entityId);
           static bool has(EcsRegistry* registry, id_type entityId);
       };
   }
