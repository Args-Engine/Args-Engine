
.. _program_listing_file__home_runner_work_Legion-Engine_Legion-Engine_legion_engine_core_scenemanagement_scenemanager.hpp:

Program Listing for File scenemanager.hpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Legion-Engine_Legion-Engine_legion_engine_core_scenemanagement_scenemanager.hpp>` (``/home/runner/work/Legion-Engine/Legion-Engine/legion/engine/core/scenemanagement/scenemanager.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <core/engine/system.hpp>
   #include <core/ecs/component_handle.hpp>
   #include <core/filesystem/filesystem.hpp>
   #include <core/filesystem/view.hpp>
   #include <tinygltf/json.hpp>
   
   namespace legion::core::scenemanagement
   {
       struct scene;
   
       class SceneManager final : public core::System<SceneManager>
       {
       public:
           static int sceneCount;
           static std::string currentScene;
           static std::unordered_map < id_type, std::string> sceneNames;
           static std::unordered_map < id_type, ecs::component_handle <scene > > sceneList;
   
           SceneManager() = default;
   
           virtual void setup()
           {
               fs::view fileView = fs::view("assets://scenes/");
               auto files = fileView.ls();
               if (files == common::valid)
               {
                   for (auto file : files.decay())
                   {
                       if (file.get_extension() == common::valid)
                       {
                           if (file.get_extension().decay() == ".cornflake")
                           {
                               auto fileName = file.get_filename().decay();
                               log::debug("Added {}",fileName);
                               sceneNames.emplace(nameHash(fileName), fileName);
                           }
                       }
                   }
               }
           }
   
           static ecs::entity_handle create_scene_entity();
   
           static bool create_scene(const std::string& name);
   
           static bool create_scene(const std::string& name, ecs::entity_handle& ent);
   
           static bool load_scene(const std::string& name);
   
           static bool save_scene(const std::string& name, ecs::entity_handle& ent);
   
           static ecs::component_handle<scene> get_scene(std::string name);
   
           static ecs::entity_handle get_scene_entity(std::string name);
   
          
       };
   }
