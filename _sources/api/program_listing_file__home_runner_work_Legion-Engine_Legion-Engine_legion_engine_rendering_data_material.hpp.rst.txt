
.. _program_listing_file__home_runner_work_Legion-Engine_Legion-Engine_legion_engine_rendering_data_material.hpp:

Program Listing for File material.hpp
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Legion-Engine_Legion-Engine_legion_engine_rendering_data_material.hpp>` (``/home/runner/work/Legion-Engine/Legion-Engine/legion/engine/rendering/data/material.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <rendering/data/shader.hpp>
   #include <memory>
   
   namespace legion::rendering
   {
       struct material;
   
       struct material_parameter_base
       {
           friend struct material;
       private:
           static material_parameter_base* create_param(const std::string& name, const GLint& location, const GLenum& type);
       protected:
           std::string m_name;
           id_type m_id;
           id_type m_typeId;
           GLint m_location;
   
           material_parameter_base(const std::string& name, GLint location, id_type typeId) : m_name(name), m_id(nameHash(name)), m_typeId(typeId), m_location(location) {}
   
       public:
           id_type type() { return m_typeId; }
   
           virtual void apply(shader_handle& shader) LEGION_PURE;
       };
   
       template<typename T>
       struct material_parameter : public material_parameter_base
       {
           friend struct material;
       private:
           T m_value;
   
           virtual void apply(shader_handle& shader) override
           {
               shader.get_uniform<T>(m_id).set_value(m_value);
           }
       public:
           material_parameter(const std::string& name, GLint location) : material_parameter_base(name, location, typeHash<T>()) {}
   
           void set_value(const T& value) { m_value = value; }
           T get_value() const { return m_value; }
       };
   
       struct variant_submaterial
       {
           std::unordered_map<id_type, std::unique_ptr<material_parameter_base>> parameters;
           std::unordered_map<GLint, id_type> idOfLocation;
       };
   
       struct material
       {
           friend class MaterialCache;
           friend struct material_handle;
       private:
           shader_handle m_shader;
   
           void init(const shader_handle& shader)
           {
               m_shader = shader;
               for (auto& [variantId, variantInfo] : m_shader.get_uniform_info())
                   for (auto& [name, location, type] : variantInfo)
                   {
                       id_type hash = nameHash(name);
                       m_variants[variantId].parameters.emplace(hash, material_parameter_base::create_param(name, location, type));
                       m_variants[variantId].idOfLocation[location] = hash;
                   }
           }
   
           std::string m_name;
           id_type m_currentVariant = 0;
           std::unordered_map<id_type, variant_submaterial> m_variants;
       public:
           bool has_variant(id_type variantId) const;
           bool has_variant(const std::string& variant) const;
           void set_variant(id_type variantId);
           void set_variant(const std::string& variant);
   
           void bind();
   
           void release()
           {
               shader_handle::release();
           }
   
           template<typename T>
           void set_param(const std::string& name, const T& value);
   
           template<typename T>
           L_NODISCARD bool has_param(const std::string& name);
   
           template<typename T>
           L_NODISCARD T get_param(const std::string& name);
   
           template<typename T>
           void set_param(GLint location, const T& value);
   
           template<typename T>
           L_NODISCARD bool has_param(GLint location);
   
           template<typename T>
           L_NODISCARD T get_param(GLint location);
   
           L_NODISCARD attribute get_attribute(const std::string& name)
           {
               return m_shader.get_attribute(nameHash(name));
           }
       };
   
       struct material_handle
       {
           id_type id;
   
           bool has_variant(id_type variantId) const;
           bool has_variant(const std::string& variant) const;
           void set_variant(id_type variantId);
           void set_variant(const std::string& variant);
   
           void bind();
   
           void release()
           {
               shader_handle::release();
           }
   
           std::string get_name();
   
           template<typename T>
           void set_param(const std::string& name, const T& value);
   
           template<typename T>
           L_NODISCARD bool has_param(const std::string& name);
   
           template<typename T>
           L_NODISCARD T get_param(const std::string& name);
   
           template<typename T>
           void set_param(GLint location, const T& value);
   
           template<typename T>
           L_NODISCARD bool has_param(GLint location);
   
           template<typename T>
           L_NODISCARD T get_param(GLint location);
   
           attribute get_attribute(const std::string& name);
   
           bool operator==(const material_handle& other) const { return id == other.id; }
   
           template<typename Archive>
           void serialize(Archive& archive);
       };
       template<typename Archive>
       void material_handle::serialize(Archive& archive)
       {
           archive(id);
       }
   
       constexpr material_handle invalid_material_handle{ invalid_id };
   
       class MaterialCache
       {
           friend struct material_handle;
       private:
           static async::rw_spinlock m_materialLock;
           static std::unordered_map<id_type, material> m_materials;
   
           static material_handle m_invalid_material;
   
       public:
           static material_handle create_material(const std::string& name, const shader_handle& shader);
   
           static material_handle create_material(const std::string& name, const filesystem::view& shaderFile, shader_import_settings settings = default_shader_settings);
   
           static material_handle get_material(const std::string& name);
       };
   
   #pragma region implementations
       template<typename T>
       void material_handle::set_param(const std::string& name, const T& value)
       {
           OPTICK_EVENT();
           OPTICK_TAG("Name", name.c_str());
   
           async::readonly_guard guard(MaterialCache::m_materialLock);
           MaterialCache::m_materials[id].set_param<T>(name, value);
       }
   
       template<typename T>
       void material_handle::set_param(GLint location, const T& value)
       {
           OPTICK_EVENT();
           OPTICK_TAG("Location", location);
   
           async::readonly_guard guard(MaterialCache::m_materialLock);
           MaterialCache::m_materials[id].set_param<T>(location, value);
       }
   
       template<typename T>
       L_NODISCARD bool material_handle::has_param(const std::string& name)
       {
           async::readonly_guard guard(MaterialCache::m_materialLock);
           return MaterialCache::m_materials[id].has_param<T>(name);
       }
   
       template<typename T>
       L_NODISCARD bool material_handle::has_param(GLint location)
       {
           async::readonly_guard guard(MaterialCache::m_materialLock);
           return MaterialCache::m_materials[id].has_param<T>(location);
       }
   
       template<typename T>
       L_NODISCARD T material_handle::get_param(const std::string& name)
       {
           async::readonly_guard guard(MaterialCache::m_materialLock);
           return MaterialCache::m_materials[id].get_param<T>(name);
       }
   
       template<typename T>
       L_NODISCARD T material_handle::get_param(GLint location)
       {
           async::readonly_guard guard(MaterialCache::m_materialLock);
           return MaterialCache::m_materials[id].get_param<T>(location);
       }
   
       template<>
       inline void material::set_param<math::color>(const std::string& name, const math::color& value)
       {
           if (m_currentVariant == 0)
               m_currentVariant = nameHash("default");
   
           id_type id = nameHash(name);
           variant_submaterial& submaterial = m_variants.at(m_currentVariant);
           if (submaterial.parameters.count(id) && submaterial.parameters[id]->type() == typeHash<math::vec4>())
               static_cast<material_parameter<math::vec4>*>(submaterial.parameters[id].get())->set_value(value);
           else
               log::warn("material {} does not have a parameter named {} of type {}", m_name, name, typeName<math::color>());
       }
   
       template<>
       L_NODISCARD inline bool material::has_param<math::color>(const std::string& name)
       {
           if (m_currentVariant == 0)
               m_currentVariant = nameHash("default");
   
           id_type id = nameHash(name);
           variant_submaterial& submaterial = m_variants.at(m_currentVariant);
           return submaterial.parameters.count(id) && submaterial.parameters.at(id)->type() == typeHash<math::vec4>();
       }
   
       template<>
       L_NODISCARD inline math::color material::get_param<math::color>(const std::string& name)
       {
           if (m_currentVariant == 0)
               m_currentVariant = nameHash("default");
   
           id_type id = nameHash(name);
           variant_submaterial& submaterial = m_variants.at(m_currentVariant);
           if (submaterial.parameters.count(id) && submaterial.parameters[id]->type() == typeHash<math::vec4>())
               return static_cast<material_parameter<math::vec4>*>(submaterial.parameters[id].get())->get_value();
   
           log::warn("material {} does not have a parameter named {} of type {}", m_name, name, typeName<math::color>());
           return math::color();
       }
   
       template<>
       inline void material::set_param<math::color>(GLint location, const math::color& value)
       {
           if (m_currentVariant == 0)
               m_currentVariant = nameHash("default");
   
           variant_submaterial& submaterial = m_variants.at(m_currentVariant);
           if (!submaterial.idOfLocation.count(location))
               log::warn("material {} does not have a parameter at location {} of type {}", m_name, location, typeName<math::color>());
   
           id_type id = submaterial.idOfLocation[location];
   
           if (submaterial.parameters.count(id) && submaterial.parameters[id]->type() == typeHash<math::vec4>())
               static_cast<material_parameter<math::vec4>*>(submaterial.parameters[id].get())->set_value(value);
           else
               log::warn("material {} does not have a parameter at location {} of type {}", m_name, location, typeName<math::color>());
       }
   
       template<>
       L_NODISCARD inline math::color material::get_param<math::color>(GLint location)
       {
           if (m_currentVariant == 0)
               m_currentVariant = nameHash("default");
   
           variant_submaterial& submaterial = m_variants.at(m_currentVariant);
           if (!submaterial.idOfLocation.count(location))
               log::warn("material {} does not have a parameter at location {} of type {}", m_name, location, typeName<math::color>());
   
           id_type id = submaterial.idOfLocation[location];
           if (submaterial.parameters.count(id) && submaterial.parameters[id]->type() == typeHash<math::vec4>())
               return static_cast<material_parameter<math::vec4>*>(submaterial.parameters[id].get())->get_value();
   
           log::warn("material {} does not have a parameter at location {} of type {}", m_name, location, typeName<math::color>());
           return math::color();
       }
   
       template<>
       L_NODISCARD inline bool material::has_param<math::color>(GLint location)
       {
           if (m_currentVariant == 0)
               m_currentVariant = nameHash("default");
   
           variant_submaterial& submaterial = m_variants.at(m_currentVariant);
           if (!submaterial.idOfLocation.count(location))
               return false;
   
           id_type id = submaterial.idOfLocation[location];
           return submaterial.parameters.count(id) && submaterial.parameters[id]->type() == typeHash<math::vec4>();
       }
   
       template<typename T>
       void material::set_param(const std::string& name, const T& value)
       {
           if (m_currentVariant == 0)
               m_currentVariant = nameHash("default");
   
           variant_submaterial& submaterial = m_variants.at(m_currentVariant);
           id_type id = nameHash(name);
           if (submaterial.parameters.count(id) && submaterial.parameters[id]->type() == typeHash<T>())
               static_cast<material_parameter<T>*>(submaterial.parameters[id].get())->set_value(value);
           else
               log::warn("material {} does not have a parameter named {} of type {}", m_name, name, typeName<T>());
       }
   
       template<typename T>
       L_NODISCARD bool material::has_param(const std::string& name)
       {
           if (m_currentVariant == 0)
               m_currentVariant = nameHash("default");
   
           id_type id = nameHash(name);
           variant_submaterial& submaterial = m_variants.at(m_currentVariant);
           return submaterial.parameters.count(id) && submaterial.parameters[id]->type() == typeHash<T>();
       }
   
       template<typename T>
       L_NODISCARD T material::get_param(const std::string& name)
       {
           if (m_currentVariant == 0)
               m_currentVariant = nameHash("default");
   
           id_type id = nameHash(name);
           variant_submaterial& submaterial = m_variants.at(m_currentVariant);
           if (submaterial.parameters.count(id) && submaterial.parameters[id]->type() == typeHash<T>())
               return static_cast<material_parameter<T>*>(submaterial.parameters[id].get())->get_value();
   
           log::warn("material {} does not have a parameter named {} of type {}", m_name, name, typeName<T>());
           return T();
       }
   
       template<typename T>
       void material::set_param(GLint location, const T& value)
       {
           if (m_currentVariant == 0)
               m_currentVariant = nameHash("default");
   
           variant_submaterial& submaterial = m_variants.at(m_currentVariant);
           if (!submaterial.idOfLocation.count(location))
               log::warn("material {} does not have a parameter at location {} of type {}", m_name, location, typeName<T>());
   
           id_type id = submaterial.idOfLocation[location];
   
           if (submaterial.parameters.count(id) && submaterial.parameters[id]->type() == typeHash<T>())
               static_cast<material_parameter<T>*>(submaterial.parameters[id].get())->set_value(value);
           else
               log::warn("material {} does not have a parameter at location {} of type {}", m_name, location, typeName<T>());
       }
   
       template<typename T>
       L_NODISCARD T material::get_param(GLint location)
       {
           if (m_currentVariant == 0)
               m_currentVariant = nameHash("default");
   
           variant_submaterial& submaterial = m_variants.at(m_currentVariant);
           if (!submaterial.idOfLocation.count(location))
               log::warn("material {} does not have a parameter at location {} of type {}", m_name, location, typeName<T>());
   
           id_type id = submaterial.idOfLocation[location];
           if (submaterial.parameters.count(id) && submaterial.parameters[id]->type() == typeHash<T>())
               return static_cast<material_parameter<T>*>(submaterial.parameters[id].get())->get_value();
   
           log::warn("material {} does not have a parameter at location {} of type {}", m_name, location, typeName<T>());
           return T();
       }
   
       template<typename T>
       L_NODISCARD bool material::has_param(GLint location)
       {
           if (m_currentVariant == 0)
               m_currentVariant = nameHash("default");
   
           variant_submaterial& submaterial = m_variants.at(m_currentVariant);
           if (!submaterial.idOfLocation.count(location))
               return false;
   
           id_type id = submaterial.idOfLocation[location];
           return submaterial.parameters.count(id) && submaterial.parameters[id]->type() == typeHash<T>();
       }
   #pragma endregion
   }
   
   
   #if !defined(DOXY_EXCLUDE)
   namespace std
   {
       template<>
       struct hash<legion::rendering::material_handle>
       {
           std::size_t operator()(legion::rendering::material_handle const& handle) const noexcept
           {
               return static_cast<std::size_t>(handle.id);
           }
       };
   }
   #endif
