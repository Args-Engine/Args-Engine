////////////////////////
//  Color Correction  //
////////////////////////

vec3 GammaCorrect(vec3 color)
{
    return pow(color / (color + vec3(1.0)), vec3(1.0/2.2));
}

#include <math_ext.shinc>

mat3 ACESInputMatrix = mat3(
    0.59719, 0.35458, 0.04823,
    0.07600, 0.90834, 0.01566,
    0.02840, 0.13383, 0.83777
);

mat3 ACESOutputMatrix = mat3(
     1.60475, -0.53108, -0.07367,
    -0.10208,  1.10813, -0.00605,
    -0.00327, -0.07276,  1.07602
);

vec3 RRTAndODTFit(vec3 v)
{
    vec3 a = v * (v + 0.0245786f) - 0.000090537f;
    vec3 b = v * (0.983729f * v + 0.4329510f) + 0.238081f;
    return a / b;
}

vec3 ACESToneMapFitted(vec3 color)
{
    color = color * ACESInputMatrix;
    color = RRTAndODTFit(color);
    color = color * ACESOutputMatrix;
    return clamp01(color);
}

vec3 ACESToneMapFittedNoMat(vec3 color)
{
    color = RRTAndODTFit(color);
    return clamp01(color);
}

vec3 TonemapUnreal3(vec3 color) {
    // Unreal 3, Documentation: "Color Grading"
    // Adapted to be close to Tonemap_ACES, with similar range
    vec3 x22 = pow(clamp(color, 0.0,  1.0 - epsilon), vec3(2.2));
    vec3 invg = -safeDiv(x22, x22 - 1);
    return invg / (invg + vec3(0.155)) * 1.019;
}

vec3 ACESToneMap(vec3 color)
{
    float a = 2.51f;
    float b = 0.03f;
    float c = 2.43f;
    float d = 0.59f;
    float e = 0.14f;
    return clamp01((color*(a*color+b))/(color*(c*color+d)+e));
}

float Luminance(vec3 color)
{
    return dot(color, vec3(0.2126f, 0.7152f, 0.0722f));
}

vec3 ReinhardJodie(vec3 color)
{
    float lum = Luminance(color);
    vec3 tv = color / (1.0f + color);
    return mix(color / (1.0f + lum), tv, tv);
}

vec3 BaierToneMap(vec3 color)
{
    return mix(-((color*color*color*1.1)-(color*color*2.0))/0.9, color, vec3(color.r > 1.0, color.g > 1.0, color.b > 1.0));
}

vec3 LegionToneMap(vec3 color)
{
    return mix(-((color*color*color*4.2)-(color*color*4.1))/1.0, color, vec3(color.r > 0.5, color.g > 0.5, color.b > 0.5));
}

vec3 FunkyToneMap(vec3 color)
{
    return (sin(vec3(sqrt(2))/log(color))+vec3(1))/2;
}

vec3 WarmToneMap(vec3 color)
{
    return vec3(color.r, pow(color.g, 1.2), pow(color.b, 1.6));
}
