/////////////////////
//  Default Input  //
/////////////////////

#if defined(VERTEX_SHADER)
in vec3 position : SV_POSITION;
in vec3 normal : SV_NORMAL;
in vec3 tangent : SV_TANGENT;
in vec4 vertexcolor : SV_COLOR;
in vec2 uv : SV_TEXCOORD0;
in mat4 modelMatrix : SV_MODELMATRIX;
#endif

#if defined(VERTEX_SHADER)
#define io out
#elif defined(FRAGMENT_SHADER)
#define io in
#endif

#if defined(GEOMETRY_SHADER)
in _L_STDVTXGEOM
#elif defined(GEOMETRY_SHADER_ACTIVE)
#if defined(VERTEX_SHADER)
out _L_STDVTXGEOM
#elif defined(FRAGMENT_SHADER)
in _L_STDGEOMFRAG
#endif
#else
io _L_STDIO
#endif
{
    vec3 position;
    vec3 wvertex;
    vec4 vertexcolor;
    vec3 normal;
    vec3 wnormal;
    vec3 tangent;
    vec3 wtangent;
    vec2 uv;
    mat4 modelMatrix;
}
#if defined(GEOMETRY_SHADER)
_L_stdin[_L_geom_vtxc];
#else
_L_stdio;
#endif
#if defined(GEOMETRY_SHADER)
out _L_STDGEOMFRAG
{
    vec3 position;
    vec3 wvertex;
    vec4 vertexcolor;
    vec3 normal;
    vec3 wnormal;
    vec3 tangent;
    vec3 wtangent;
    vec2 uv;
    mat4 modelMatrix;
} _L_stdout;
#endif


#if defined(VERTEX_SHADER)
#define stdio(param) param
#define stdin(param) param
#define stdout(param) _L_stdio.param
#elif defined(FRAGMENT_SHADER)
#define stdio(param) _L_stdio.param
#define stdin(param) _L_stdio.param
#elif defined(GEOMETRY_SHADER)
#define stdin(index, param) _L_stdin[index].param
#define stdout(param) _L_stdout.param
#endif

struct Camera
{
    mat4 viewMatrix;
    mat4 projectionMatrix;
    vec3 position;
    uint index;
    vec3 viewDirection;
    #if defined(GEOMETRY_SHADER)
    vec3 toView[_L_geom_vtxc];
    #else
    vec3 toView;
    #endif
};

struct CameraInput
{
    mat4 view;
    mat4 proj;
    vec4 posmeta;
    vec4 vdirmeta;
    uint idx;
};

uniform CameraInput _L_cmr_in : SV_CAMERA;

#define ViewMatrix _L_cmr_in.view;
#define ProjectionMatrix _L_cmr_in.proj;
#define ViewProjectionMatrix (_L_cmr_in.proj * _L_cmr_in.view)

vec4 WorldToScreenSpacePosition(vec3 pos)
{
    return ((_L_cmr_in.proj * _L_cmr_in.view) * vec4(pos, 1.f));
}

vec4 WorldToScreenSpacePosition(vec4 pos)
{
    return ((_L_cmr_in.proj * _L_cmr_in.view) * pos);
}

Camera GetCamera()
{
    Camera camera;
    camera.viewMatrix = _L_cmr_in.view;
    camera.projectionMatrix = _L_cmr_in.proj;
    camera.position = _L_cmr_in.posmeta.xyz;
    camera.index = _L_cmr_in.idx;
    camera.viewDirection = _L_cmr_in.vdirmeta.xyz;
    #if defined(VERTEX_SHADER)
    camera.toView = camera.position - (modelMatrix * vec4(position, 1.0)).xyz;
    #elif defined(FRAGMENT_SHADER)
    camera.toView = camera.position - _L_stdio.wvertex;
    #elif defined(GEOMETRY_SHADER)
    for(int i = 0; i < _L_geom_vtxc; i++)
        camera.toView[i] = camera.position - _L_stdin[i].wvertex;
    #endif
    return camera;
}

vec4 ModelToScreenSpacePosition(vec3 pos)
{
    #if defined(GEOMETRY_SHADER)
    return (_L_cmr_in.proj * _L_cmr_in.view * stdin(0, modelMatrix)) * vec4(pos, 1.f);
    #else
    return (_L_cmr_in.proj * _L_cmr_in.view * stdio(modelMatrix)) * vec4(pos, 1.f);
    #endif
}

#if defined(GEOMETRY_SHADER)  // Geometry shader
vec3 GetWorldPosition(int index)
{
    return normalize(stdin(index, wvertex));
}

vec3 GetWorldNormal(int index)
{
    return normalize(stdin(index, wnormal));
}

vec3 GetWorldTangent(int index)
{
    vec3 worldNormal = GetWorldNormal(index);
    return normalize(stdin(index, wtangent) - dot(stdin(index, wtangent), worldNormal) * worldNormal);
}

vec3 GetWorldTangent(int index, vec3 worldNormal)
{
    return normalize(stdin(index, wtangent) - dot(stdin(index, wtangent), worldNormal) * worldNormal);
}

vec3 GetWorldBitangent(int index)
{
    vec3 worldNormal = GetWorldNormal(index);
	vec3 worldTangent = GetWorldTangent(index, worldNormal);
	return normalize(cross(worldNormal, worldTangent));
}

vec3 GetWorldBitangent(int index, vec3 worldNormal)
{
	vec3 worldTangent = GetWorldTangent(index, worldNormal);
	return normalize(cross(worldNormal, worldTangent));
}

vec3 GetWorldBitangent(vec3 worldNormal, vec3 worldTangent)
{
	return normalize(cross(worldNormal, worldTangent));
}

vec3 GetWorldDirection(vec3 dir)
{
    return normalize((stdin(0, modelMatrix) * vec4(dir, 0.0)).xyz);
}

vec3 GetWorldPoint(vec3 p)
{
    return (stdin(0, modelMatrix) * vec4(p, 1.0)).xyz;
}

mat3 GetTBNMatrix(int index)
{
    vec3 worldNormal = GetWorldNormal(index);
	vec3 worldTangent = GetWorldTangent(index, worldNormal);
	vec3 worldBitangent = GetWorldBitangent(worldNormal, worldTangent);
	return transpose(mat3(worldTangent, worldBitangent, worldNormal));
}

mat3 GetTBNMatrix(vec3 worldNormal, vec3 worldTangent)
{
    vec3 orthogonalizedTangent = normalize(worldTangent - dot(worldTangent, worldNormal) * worldNormal);
	vec3 worldBitangent = GetWorldBitangent(worldNormal, orthogonalizedTangent);
	return transpose(mat3(orthogonalizedTangent, worldBitangent, worldNormal));
}

#else // Not geometry shader
vec3 GetWorldPosition()
{
#if defined(FRAGMENT_SHADER)
    return _L_stdio.wvertex;
#elif defined(VERTEX_SHADER)
    return (stdio(modelMatrix) * vec4(stdio(position), 1.0)).xyz;
#endif
}

vec3 GetWorldNormal()
{
#if defined(FRAGMENT_SHADER)
    return normalize(_L_stdio.wnormal);
#elif defined(VERTEX_SHADER)
    return normalize((stdio(modelMatrix) * vec4(stdio(normal), 0.0)).xyz);
#endif
}

vec3 GetWorldTangent()
{
    vec3 worldNormal = GetWorldNormal();
#if defined(FRAGMENT_SHADER)
    return normalize(_L_stdio.wtangent - dot(_L_stdio.wtangent, worldNormal) *worldNormal);
#elif defined(VERTEX_SHADER)
    vec3 worldTangent = normalize((stdio(modelMatrix) * vec4(tangent, 0.0)).xyz);
    return normalize(worldTangent - dot(worldTangent, worldNormal) * worldNormal);
#endif
}

vec3 GetWorldTangent(vec3 worldNormal)
{
#if defined(FRAGMENT_SHADER)
    return normalize(_L_stdio.wtangent - dot(_L_stdio.wtangent, worldNormal) *worldNormal);
#elif defined(VERTEX_SHADER)
    vec3 worldTangent = normalize((stdio(modelMatrix) * vec4(tangent, 0.0)).xyz);
    return normalize(worldTangent - dot(worldTangent, worldNormal) * worldNormal);
#endif
}

vec3 GetWorldBitangent()
{
    vec3 worldNormal = GetWorldNormal();
	vec3 worldTangent = GetWorldTangent(worldNormal);
	return normalize(cross(worldNormal, worldTangent));
}

vec3 GetWorldBitangent(vec3 worldNormal)
{
	vec3 worldTangent = GetWorldTangent(worldNormal);
	return normalize(cross(worldNormal, worldTangent));
}

vec3 GetWorldBitangent(vec3 worldNormal, vec3 worldTangent)
{
	return normalize(cross(worldNormal, worldTangent));
}

vec3 GetWorldDirection(vec3 dir)
{
    return normalize((stdio(modelMatrix) * vec4(dir, 0.0)).xyz);
}

vec3 GetWorldPoint(vec3 p)
{
    return (stdio(modelMatrix) * vec4(p, 1.0)).xyz;
}

mat3 GetTBNMatrix()
{
    vec3 worldNormal = GetWorldNormal();
	vec3 worldTangent = GetWorldTangent(worldNormal);
	vec3 worldBitangent = GetWorldBitangent(worldNormal, worldTangent);
	return transpose(mat3(worldTangent, worldBitangent, worldNormal));
}

mat3 GetTBNMatrix(vec3 worldNormal, vec3 worldTangent)
{
    vec3 orthogonalizedTangent = normalize(worldTangent - dot(worldTangent, worldNormal) * worldNormal);
	vec3 worldBitangent = GetWorldBitangent(worldNormal, orthogonalizedTangent);
	return transpose(mat3(orthogonalizedTangent, worldBitangent, worldNormal));
}
#endif // End not geometry shader

#if defined(VERTEX_SHADER)
void PropagateStdIO()
{
    _L_stdio.position = position;
    _L_stdio.wvertex = GetWorldPosition();
    _L_stdio.vertexcolor = vertexcolor;
    _L_stdio.normal = normal;
    _L_stdio.wnormal = GetWorldNormal();
    _L_stdio.tangent = tangent;
    _L_stdio.wtangent = GetWorldTangent(_L_stdio.wnormal);
    _L_stdio.uv = uv;
    _L_stdio.modelMatrix = modelMatrix;
}
#elif defined(GEOMETRY_SHADER)
void PropagateStdIO(int index)
{
    stdout(position) = stdin(index, position);
    stdout(wvertex) = stdin(index, wvertex);
    stdout(vertexcolor) = stdin(index, vertexcolor);
    stdout(normal) = stdin(index, normal);
    stdout(wnormal) = stdin(index, wnormal);
    stdout(tangent) = stdin(index, tangent);
    stdout(wnormal) = stdin(index, wnormal);
    stdout(uv) = stdin(index, uv);
    stdout(modelMatrix) = stdin(index, modelMatrix);
}
#endif
