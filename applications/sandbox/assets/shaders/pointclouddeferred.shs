#version 450
#state CULL OFF
#state DEPTH OFF

generate(fragment, vertex)

#include <stdio.shinc>
#include <lighting.shinc>

shader(vertex)
{
    void main(void)
    {
        gl_Position = vec4(stdin(position), 1.0);
        PropagateStdIO();
    }
}


shader(fragment)
{
    uniform vec4 skycolor;

    void main(void)
    {
        Camera camera = GetCamera();

        Material material;

        material.albedo = SceneColor();
        material.normal = SceneNormal();
        material.metallic = 0.0;
        material.roughness = 1.0;
        material.dielectric = 0.04;
        material.ambientOcclusion = 1.0;
        material.F0 = Fresnel0(material.albedo, material.metallic, material.dielectric);

        vec3 worldpos = ScenePosition();

        vec3 lighting = GetAllLighting(material, camera, worldpos);

        vec3 unitDir = reflect(-normalize(camera.toView), material.normal);
        float reflectance = clamp01(0.01 + (pow(max(0.0, (1.0 - material.roughness)), 4) * 0.99));
        vec3 reflection = mix(mix(vec3(average(skycolor.rgb)), skycolor.rgb, clamp01(dot(unitDir, vec3(0.f, 1.f, 0.f)) + 0.9)), (vec3(average(skycolor.rgb)) + skycolor.rgb)*0.5, material.roughness);

        lighting += reflection * mix(vec3(1.0), material.albedo.rgb, material.metallic) * reflectance;

        fragment_color = lighting;
    }
}
