#version 450
#state CULL OFF
#state DEPTH OFF

generate(fragment, vertex)

#include <stdio.shinc>
#include <lighting.shinc>
#include <math_ext.shinc>

shader(vertex)
{
    void main(void)
    {
        gl_Position = vec4(stdin(position), 1.0);
        PropagateStdIO();
    }
}


shader(fragment)
{
    uniform vec4 skycolor;

    void main(void)
    {
        Material material;
        material.normal = SceneNormal(stdin(uv));
        if(length2(material.normal) < 0.5)
            discard;

        material.albedo = SceneColor(stdin(uv));
        material.metallic = 0.0;
        material.roughness = 0.5;
        material.dielectric = 0.04;
        material.ambientOcclusion = 1.0;
        material.F0 = Fresnel0(material.albedo, material.metallic, material.dielectric);

        vec3 worldpos = ScenePosition(stdin(uv));

        Camera camera;
        camera.viewMatrix = lgn_cmr_in.view;
        camera.projectionMatrix = lgn_cmr_in.proj;
        camera.position = lgn_cmr_in.posnearz.xyz;
        camera.nearz = lgn_cmr_in.posnearz.w;
        camera.viewDirection = lgn_cmr_in.vdirfarz.xyz;
        camera.farz = lgn_cmr_in.vdirfarz.w;
        camera.toView = camera.position - worldpos;

        vec3 lighting = vec3(0.0);

        if(lgn_light_count > 0)
        {
            lighting += CalculateLight(lights[0], camera, material, worldpos) * material.albedo.a;

            for(int i = 1; i < lgn_light_count; i++)
                lighting += CalculateLight(lights[i], camera, material, worldpos);

            lighting += GetAmbientLight(material.ambientOcclusion, material.albedo.rgb);
        }

        vec3 unitDir = reflect(-normalize(camera.toView), material.normal);
        float reflectance = clamp01(0.01 + (pow(max(0.0, (1.0 - material.roughness)), 4) * 0.99));
        vec3 reflection = mix(mix(vec3(average(skycolor.rgb)), skycolor.rgb, clamp01(dot(unitDir, vec3(0.f, 1.f, 0.f)) + 0.9)), (vec3(average(skycolor.rgb)) + skycolor.rgb)*0.5, material.roughness);

        lighting += reflection * mix(vec3(1.0), material.albedo.rgb, material.metallic) * reflectance;

        fragment_color = vec4(lighting, 1.0);
        fragment_normal = vec4(0.0);
        fragment_position = vec4(0.0);
        fragment_overdraw = vec4(0.0);
    }
}
