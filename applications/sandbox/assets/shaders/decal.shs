#version 450
#state DEPTH OFF

generate(vertex, fragment)

#include<stdio.shinc>
#include<math_ext.shinc>
#include <lighting.shinc>

shader(vertex)
{
    void main(void)
    {
        gl_Position = ModelToScreenSpacePosition(position);
        PropagateStdIO();
    }
}

shader(fragment)
{
    uniform vec4 skycolor;

    void main(void)
    {
        if((max(abs(stdin(uv).x- 0.5), abs(stdin(uv).y- 0.5))) < 0.49)
        {
            float screenDepth = SceneDepth().r;
            vec4 clipSpacePos = vec4(vec2(0.0), screenDepth, 1.0);
            vec4 viewSpacePos = inverse(ProjectionMatrix) * clipSpacePos;

            float sceneDepth = viewSpacePos.z / viewSpacePos.w;
            viewSpacePos = ViewMatrix * vec4(GetWorldPosition(), 1.0);
            vec3 viewRay = viewSpacePos.xyz / viewSpacePos.z;
            vec3 viewSpaceScenePos = viewRay * sceneDepth;
            vec3 worldScenePos = (inverse(ViewMatrix) * vec4(viewSpaceScenePos, 1.0)).xyz;

            vec3 localScenePos = (inverse(stdin(modelMatrix)) * vec4(worldScenePos.rgb, 1.0)).xyz;

            if(max(abs(localScenePos.x), max(abs(localScenePos.y), abs(localScenePos.z))) > 0.5)
                discard;

            Camera camera = GetCamera();

            vec3 ddxWp = dFdxFine(worldScenePos);
            vec3 ddyWp = dFdyFine(worldScenePos);
            vec3 worldNormal = normalize(cross(ddyWp, ddxWp));

            vec3 worldTangent = (stdin(modelMatrix) * vec4(1, 0, 0, 1)).xyz;
            worldTangent = normalize(worldTangent - dot(worldTangent, worldNormal) * worldNormal);

            Material material = ExtractMaterial(localScenePos.xz + vec2(0.5), camera, worldNormal, worldTangent);

            vec3 lighting = GetAllLighting(material, camera, worldScenePos);

            vec3 unitDir = reflect(-normalize(camera.toView), material.normal);
            float reflectance = clamp01(0.01 + (pow(max(0.0, (1.0 - material.roughness)), 4) * 0.99));
            vec3 reflection = mix(mix(vec3(length(skycolor.rgb)), skycolor.rgb, clamp01(dot(unitDir, vec3(0.f, 1.f, 0.f)) + 0.9)), (vec3(length(skycolor.rgb)) + skycolor.rgb)*0.5, material.roughness);

            lighting += reflection * mix(vec3(1.0), material.albedo.rgb, material.metallic) * reflectance;

            fragment_color = vec4(lighting, material.albedo.a);
        }
        else
        fragment_color = vec4(vec3(0), 1);
    }
}
