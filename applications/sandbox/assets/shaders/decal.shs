#version 450
#state DEPTH OFF
#state CULL FRONT

generate(vertex, fragment)

#include<stdio.shinc>
#include<math_ext.shinc>
#include <lighting.shinc>

shader(vertex)
{
    void main(void)
    {
        gl_Position = ModelToScreenSpacePosition(position);
        PropagateStdIO();
    }
}

shader(fragment)
{
    uniform vec4 skycolor;

    void main(void)
    {
        vec3 worldScenePos = ScenePosition();
        if(worldScenePos == vec3(0.0))
            discard;

        vec3 localScenePos = (inverse(stdin(modelMatrix)) * vec4(worldScenePos.xyz, 1.0)).xyz;

        if(max(abs(localScenePos.x), max(abs(localScenePos.y), abs(localScenePos.z))) > 0.5)
            discard;

        Camera camera = GetCamera();

        vec3 worldNormal = SceneNormal();
        if(worldNormal == vec3(0.0))
            discard;

        vec3 worldTangent = (stdin(modelMatrix) * vec4(1, 0, 0, 1)).xyz;
        worldTangent = normalize(worldTangent - dot(worldTangent, worldNormal) * worldNormal);

        Material material = ExtractMaterial(localScenePos.xz + vec2(0.5), camera, worldNormal, worldTangent);

        vec3 lighting = GetAllLighting(material, camera, worldScenePos);

        vec3 unitDir = reflect(-normalize(camera.toView), material.normal);
        float reflectance = clamp01(0.01 + (pow(max(0.0, (1.0 - material.roughness)), 4) * 0.99));
        vec3 reflection = mix(mix(vec3(length(skycolor.rgb)), skycolor.rgb, clamp01(dot(unitDir, vec3(0.f, 1.f, 0.f)) + 0.9)), (vec3(length(skycolor.rgb)) + skycolor.rgb)*0.5, material.roughness);

        lighting += reflection * mix(vec3(1.0), material.albedo.rgb, material.metallic) * reflectance;

        SubmitOutput(vec4(lighting, material.albedo.a), worldNormal, worldScenePos, material.emissive);
    }
}
