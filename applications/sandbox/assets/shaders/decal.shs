#version 450
#state DEPTH OFF

generate(vertex, fragment)

#include<stdio.shinc>
#include<math_ext.shinc>

shader(vertex)
{
    void main(void)
    {
        gl_Position = ModelToScreenSpacePosition(position);
        PropagateStdIO();
    }
}

shader(fragment)
{
    //uniform sampler2D _texture;

    void main(void)
    {
        if((max(abs(stdin(uv).x- 0.5), abs(stdin(uv).y- 0.5))) < 0.49)
        {
            float screenDepth = SceneDepth().r;
            vec4 clipSpacePos = vec4(vec2(0.0), screenDepth, 1.0);
            vec4 viewSpacePos = inverse(ProjectionMatrix) * clipSpacePos;

            float sceneDepth = viewSpacePos.z / viewSpacePos.w;
            viewSpacePos = ViewMatrix * vec4(GetWorldPosition(), 1.0);
            vec3 viewRay = viewSpacePos.xyz / viewSpacePos.z;
            vec3 viewSpaceScenePos = viewRay * sceneDepth;
            vec3 worldScenePos = (inverse(ViewMatrix) * vec4(viewSpaceScenePos, 1.0)).xyz;

            vec3 localScenePos = (inverse(stdin(modelMatrix)) * vec4(worldScenePos.rgb, 1.0)).xyz;

            if(max(abs(localScenePos.x), max(abs(localScenePos.y), abs(localScenePos.z))) > 0.5)
                discard;

            fragment_color =  vec4(vec3(1.0), length(localScenePos.xz) < 0.25 );
        }
        else
        fragment_color = vec4(vec3(0), 1);
    }
}
