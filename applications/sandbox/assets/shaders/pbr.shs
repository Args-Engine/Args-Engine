#version 450
#state CULL BACK

generate(fragment, vertex)

#include <stdio.shinc>
#include <lighting.shinc>
#include <color_correction.shinc>

shader(vertex)
{
    void main(void)
    {
        gl_Position = ModelToScreenSpacePosition(position);
        PropagateStdIO();
    }
}

shader(fragment)
{
    out vec4 fragment_color;

    void main(void)
    {
        Camera camera = GetCamera();

        vec3 worldNormal = GetWorldNormal();
        Material material = ExtractMaterial(stdio(uv), camera, worldNormal, GetWorldTangent(worldNormal));

        vec3 lighting = GammaCorrect(GetAllLighting(material, camera, GetWorldPosition()));


            vec3 unitDir = normalize(stdin(position));
            lighting += mix(vec3(1.f), vec3(0.2f, 0.4f, 1.0f), clamp(dot(unitDir, vec3(0.f, 1.f, 0.f)) + 0.5f, 0.f, 1.f)) * pow(1.0 - material.roughness, 8);

        fragment_color = vec4(lighting, material.albedo.a);
    }
}
