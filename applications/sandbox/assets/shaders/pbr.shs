#version 450
#state CULL BACK

generate(fragment, vertex)

#include <stdio.shinc>
#include <lighting.shinc>
#include <color_correction.shinc>

shader(vertex)
{
    void main(void)
    {
        gl_Position = ModelToScreenSpacePosition(position);
        PropagateStdIO();
    }
}

shader(fragment)
{
    uniform bool discardExcess;
    uniform vec4 skycolor;

    out vec4 fragment_color;

    uniform bool tonemap;

    void main(void)
    {
        Camera camera = GetCamera();

        vec3 worldNormal = GetWorldNormal();
        Material material = ExtractMaterial(stdio(uv), camera, worldNormal, GetWorldTangent(worldNormal));

        if(discardExcess)
            if(material.texcoords.x < 0 || material.texcoords.x > 1 || material.texcoords.y < 0 || material.texcoords.y > 1)
                discard;

        vec3 lighting = GammaCorrect(GetAllLighting(material, camera, GetWorldPosition()));

        vec3 unitDir = reflect(-normalize(camera.toView), material.normal);
        lighting += mix(vec3(length(skycolor.rgb)), skycolor.rgb, clamp01(dot(unitDir, vec3(0.f, 1.f, 0.f)) + 0.9)) * pow(1.0 - material.roughness, 4);

        if(tonemap)
        {
            fragment_color = vec4(WarmToneMap(lighting), material.albedo.a);
        }
        else
        {
            fragment_color = vec4(LegionToneMap(lighting), material.albedo.a);
        }
    }
}
