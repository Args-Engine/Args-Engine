#version 450
#state CULL OFF

generate(vertex, geometry, fragment)

#include <stdio.shinc>
#include <utils.shinc>
#include <math_ext.shinc>

shader(vertex)
{
    void main(void)
    {
        gl_Position = vec4(position, 1.0);
        stdout(vertexcolor) =  vertexcolor;
    }
}

shader(geometry)
{
    geometry_input(points)
    geometry_output(triangle_strip, max_vertices = 4)

    uniform float size;

    void main(void)
    {
        mat4 mat;
        mat[0] = vec4(ViewMatrix[0][2], ViewMatrix[1][2], ViewMatrix[2][2], 0.0) * size;
        mat[1] = vec4(ViewMatrix[0][1], ViewMatrix[1][1], ViewMatrix[2][1], 0.0) * size;
        mat[2] = vec4(ViewMatrix[0][0], ViewMatrix[1][0], ViewMatrix[2][0], 0.0) * size;
        mat[3] = gl_in[0].gl_Position + vec4(0.0, -stdin(0, vertexcolor).a, 0.0, 0.0);

        stdout(vertexcolor) = stdin(0, vertexcolor);
        gl_Position = (ViewProjectionMatrix * mat) * vec4(0.0, -0.5, -0.5, 1.0);
        stdout(uv) = vec2(0.0);
        EmitVertex();
        gl_Position = (ViewProjectionMatrix * mat) * vec4(0.0, -0.5, 0.5, 1.0);
        stdout(uv) = vec2(1.0, 0.0);
        EmitVertex();
        gl_Position = (ViewProjectionMatrix * mat) * vec4(0.0, 0.5, -0.5, 1.0);
        stdout(uv) = vec2(0.0, 1.0);
        EmitVertex();
        gl_Position = (ViewProjectionMatrix * mat) * vec4(0.0, 0.5, 0.5, 1.0);
        stdout(uv) = vec2(1.0);
        EmitVertex();
        EndPrimitive();
    }
}

shader(fragment)
{
    void main(void)
    {
        if(length(stdio(uv) - vec2(0.5)) > 0.5)
            discard;
        fragment_color = vec4(stdio(vertexcolor).rgb, 1.0);
        fragment_normal = vec4(vec3(0.0), 1.0);
        fragment_position = vec4(vec3(0.0), 1.0);
        fragment_overdraw = vec4(stdio(vertexcolor).rgb, 1.0);
    }
}
